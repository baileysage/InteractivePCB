/*Function to get path to folder with project which is now opened.*/
string get_project_path() 
{
  if (board)     board(B)     return(filedir(B.name));
  if (schematic) schematic(S) return(filedir(S.name));
  if (library)   library(L)   return(filedir(L.name));
}

// variable represents the output filename.
string outputFileName = get_project_path() + "/" +"experiment.txt";

void PrintArcToFile(UL_WIRE W, int ranOnce)
{
    if(ranOnce)
    {
        printf(",\n");
    }
    // See PCB_Data_Format.md" for description of a segment of type arc.
    printf("\t{\n");
    // arc type
    printf("\t\t\"type\" : \"arc\",\n");
    printf("\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.arc.x1),u2mm(W.arc.y1));
    printf("\t\t\"end\"  : [%5.5f,%5.5f],\n",u2mm(W.arc.x2),u2mm(W.arc.y2));
    printf("\t\t\"center\"  : [%5.5f,%5.5f],\n",u2mm(W.arc.xc), u2mm(W.arc.yc));
    printf("\t\t\"radius\": %5.5f,\n",u2mm(W.arc.radius));
    printf("\t\t\"width\": %5.5f\n", u2mm(W.arc.width));
    printf("\t}");
}

void PrintLineToFile(UL_WIRE W, int ranOnce)
{
    if(ranOnce)
    {
        printf(",\n");
    }
    // See PCB_Data_Format.md" for description of a segment of type line.
    printf("\t{\n");
    printf("\t\t\"type\" : \"line\",\n");
    printf("\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.x1),u2mm(W.y1));
    printf("\t\t\"end\"  : [%5.5f,%5.5f],\n",u2mm(W.x2),u2mm(W.y2));
    printf("\t\t\"width\": %5.5f\n", u2mm(W.width));
    printf("\t}");
}

void PrintCircleToFile(UL_CIRCLE C, int ranOnce)
{
    if(ranOnce)
   {
        printf(",\n");
    }

    // See PCB_Data_Format.md" for description of a segment of type circle.
    printf("\t{\n");
    // circle type
    printf("\t\t\"type\" : \"circle\",\n");
    // center point
    printf("\t\t\"center\"  : [%5.5f,%5.5f],\n",u2mm(C.x), u2mm(C.y));
    // radius
    printf("\t\t\"radius\": %5.5f,\n",u2mm(C.radius));
    // line width
    printf("\t\t\"width\": %5.5f\n", u2mm(C.width));
    printf("\t}");
}


/*
    Define entry for PCB dimensions. This will write to the output file entries for each 
    wire that makes up the output board.
*/
void GenerateDimensions( void )
{
    // This variable is used to make sure that the extra ',' characters is not printed
    // after the last }, as this will make the json invalid and python wont import the file then.
    int ranOnce = 0;
    // Board is of type UL_BOARD. This creates a variable, B that represents the board context.
    board(B)
    {
        // Print to the file the start of the edges section. This will be an array of wire segments
        printf("\"board_shape\": [\n");
        // Iterate over all circles on the board. 
        B.circles(C) 
        {
            if(C.layer == LAYER_DIMENSION)
            {
                PrintCircleToFile(C, ranOnce);
                ranOnce = 1;
            }
        }
        // Iterate over every wire on the pcb board. 
        /*
            Eagle treats wires and arcs as almost the same thing. Some extra cheks need to 
            be performed to make sure that a line s a line ad not an arc. See ULP manual 
            page 76.
        */
        B.wires(W)
        {
            /* 
                Check if the wire is on the dimension layer. If the wire is on the dimension layer then
                add a segment object to the output file. 

                The start and end points of the wire segment need to be converted to be in millimeters.
                The type will always be set to segment since the assumption is that the board dimension
                is set using wire segments.

                The widths is the size of the wire.
            */
            if(W.layer == LAYER_DIMENSION)
            {
                /*
                    Checks are now performed to see if the line is a line or a line is a arc. 
                    Depending on the result, a different style of processing needs to be done.
                */
                if(W.arc) // False if not an arc
                {
                    PrintArcToFile(W, ranOnce);
                    ranOnce = 1;
                }
                else // must be a wire
                {
                    PrintLineToFile(W, ranOnce);
                    ranOnce = 1;
                }
                
            }
        }
        printf("\n]\n");
    }
}


void GenerateTopSilkscreen( void )
{
    // This variable is used to make sure that the extra ',' characters is not printed
    // after the last }, as this will make the json invalid and python wont import the file then.
    int ranOnce = 0;

    // Board is of type UL_BOARD. This creates a variable, B that represents the board context.
    board(B)
    {
        // Print to the file the start of the edges section. This will be an array of wire segments
        printf("\"silkscreen_top\": [\n");

        B.texts(T)
        {
            if(T.layer == LAYER_TPLACE)
            {
                T.wires(W)
                {
                    if(W.arc) // False if not an arc
                    {
                        PrintArcToFile(W,ranOnce);
                        ranOnce = 1;
                    }
                    else // must be a wire
                    {
                        PrintLineToFile(W, ranOnce);
                        ranOnce = 1;
                    }
                }
            }
        }

        B.elements(E)
        {
            // Mirror is used to signify if the parts on the top or bottom of the board. 
            // mirror = 0 -> top
            // mirror = 1 -> bottom
            if(!E.mirror)
            {
                E.footprint.wires(W)
                {
                    // Only take wires on the tplace layer
                    if(W.layer == LAYER_TPLACE)
                    {
                        if(W.arc) // False if not an arc
                        {
                            PrintArcToFile(W,ranOnce);
                            ranOnce = 1;
                        }
                        else // must be a wire
                        {
                            PrintLineToFile(W, ranOnce);
                            ranOnce = 1;
                        }
                    }
                }

                E.footprint.circles(C) 
                {
                    PrintCircleToFile(C, ranOnce);
                    ranOnce = 1;
                }
            }
        }
        printf("\n]\n");
    }
}

output(outputFileName,"w")
{
    printf("{\n");
    GenerateDimensions();
    printf(",\n");
    GenerateTopSilkscreen();
    printf("}\n");
}